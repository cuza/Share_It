<?php

namespace BrightSoft\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * UserIs
     *
     * @param Array(key=>value) $user
     * @param Array(\BrightSoft\UserBundle\Entity\Role) $roles
     * @return bool
     */
    public function UserIs($user, $roles)
    {
        if (!$user)
            return false;
        $matches = 0;
        foreach ($user->getRoles() as $role)
            if (array_search($role->getName(), $roles) !== false)
                $matches++;
        return $matches == count($roles);
    }

    /**
     * SetError
     *
     * @param Array(key=>value) $user
     * @param string $in
     * @param bool $text
     * @return Array(key=>value)
     */
    public function SetError($user, $in, $text = true)
    {
        if (!array_key_exists('error', $user) || !$user['error'])
            $user['error'] = array(
                'id' => false,
                'name' => false,
                'pass' => false,
                'email' => false
            );
        if (array_key_exists($in, $user['error']))
            $user['error'][$in] = $text;
        return $user;
    }

    /**
     * Create
     *
     * @param Array(key=>value) $user
     * @param \Symfony\Bundle\FrameworkBundle\Controller\Controller $controller
     * @return bool
     */
    public function Create($user, $controller)
    {
        $session = $controller->getRequest()->getSession();
        $em = $controller->getDoctrine()->getManager();
        if ($user['id'] > 0) {
            if ($user['id'] != $this->LoggedUser($session)->getId()) {
                $user = $this->SetError($user, 'id');
                $session->set('user_error', $user);
                return $session->get('user_error');
            }
            $temp = $this->find($user['id']);
        } else
            $temp = new User();

        if (!$temp)
            $user = $this->SetError($user, 'id');

        if ($user['pass'] != '')
            $temp->setPass($user['pass']);
        else if ($user['id'] <= 0)
            $user = $this->SetError($user, 'pass');

        $query = $this->createQueryBuilder('u')
            ->select(array('u'))
            ->where('u.slug = :slug AND u.id <> :id')
            ->setParameters(array(
                'slug' => \BrightSoft\UserBundle\Lib\Utilities::getSlug($user['name']),
                'id' => $user['id']
            )
        )->getQuery();
        if ($user['name'] != '' && !count($query->getResult()))
            $temp->setName($user['name']);
        else
            $user = $this->SetError($user, 'name');

        $query = $this->createQueryBuilder('u')
            ->select(array('u'))
            ->where('u.email = :email AND u.id <> :id')
            ->setParameters(array('email' => $user['email'], 'id' => $user['id']))
            ->getQuery();
        if ($user['email'] != '' && !count($query->getResult()))
            $temp->setEmail($user['email']);
        else
            $user = $this->SetError($user, 'email');

        if (!$user['error']) {
            if ($temp->getId() <= 0) {
                $role = $em->getRepository('UserBundle:Role')->findOneBy(array('name' => 'user'));
                $temp->addRole($role);
            }
            $this->getEntityManager()->persist($temp);
            $this->getEntityManager()->flush();

            $query = $this->createQueryBuilder('u')
                ->select(array('u', 'r', 't'))
                ->join('u.roles', 'r')
                ->join('r.tasks', 't')
                ->where('u.id = :id')
                ->setParameters(array('id' => $temp->getId()))
                ->getQuery();
            $temp = $query->getResult();
            $temp = $temp[0];
            $session->set('user-data',array());
            $session->set('user', $temp);

            return $session->get('user')->getArray();
        }
        $session->set('user_error', $user);
        return $session->get('user_error');
    }

    /**
     * Login
     *
     * @param \Symfony\Component\HttpFoundation\Request $request
     */
    public function Login($request)
    {
        $u = array(
            'name' => $request->request->get('user'),
            'pass' => $request->request->get('pass')
        );
        $query = $this->createQueryBuilder('u')
            ->select(array('u', 'r', 't'))
            ->join('u.roles', 'r')
            ->join('r.tasks', 't')
            ->where('u.name = :name AND u.pass = :pass')
            ->setParameters($u)
            ->getQuery();

        $user = $query->getResult();
        if (count($user) == 1){
            $request->getSession()->set('user', $user[0]);
            $request->getSession()->set('user-data',array());
        }
        else
            $request->getSession()->set('user_error', $this->SetError($this->SetError($u, 'name'), 'pass'));
    }

    /**
     * GetTasks
     *
     * @param User $user
     *
     * @return int id
     */
    public function GetTasks($user)
    {
        if (!$user)
            return null;
        $tasks = array();
        foreach ($user->getRoles() as $role) {
            $actions = $role->getTasksArray();
            if (count($actions))
                $tasks[] = array(
                    'name' => $role->getDescription(),
                    'actions' => $actions
                );
        }
        if (count($tasks))
            return $tasks;
        return null;
    }

    /**
     * UserLogged
     *
     * @param \Symfony\Component\HttpFoundation\Session\Session $session
     *
     * @return int id
     */
    public function LoggedUser($session)
    {
        if (!$session->has('user'))
            return null;
        return $session->get('user');
    }
}
